(
	This is a rule 110 implementation, proving that this language is turing complete.
	It essentially forces the evaluator to go through the list from left to right, then
	return to the start.

	'Essentially forces the evaluator' means that these rules are made in such a way
	that there is always exactly 1 valid next solution for any given state.
	Indeed, it is quite directly simulating a turing machine.

	For the case of presenting intermediate solutions, it abuses the overloading of "|<"
	Which can evaluate either to a new readhead, which continues evaluation, or to only
	"|>", which completely halts evaluation.

	The input format is as follows:

	It starts with any number of "|". This amount dictates how many iterations it should
	evaluate. These are followed by "<", which starts the machine.
	The tape itself consists of "_" for an empty spot, and "#" for a filled-in space.
	Finally, the tape is terminated with "|".
	The tape will automatically grow, and my advice is to not place any leading "_", as
	it will make the output less pretty.
)

{A>_ := _ {A>;
{B>_ := _ {A>;
{B># := # {C>;
{C>_ := _ {A>;

_ {A># := # # {B>;
# {C># := _ # {C>;

{A>| := <|;
{B>| := <|;
{C>| := <|;
_< := <_;
#< := <#;

|<_ := {A>_;
|<# := _{A>#;

|< := |>;

|||||||||||||||||||||||||||||||||||||||<#|:

(|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<#|:)
